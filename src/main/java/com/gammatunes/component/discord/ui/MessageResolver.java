package com.gammatunes.component.discord.ui;


import com.gammatunes.component.audio.events.PlayerOutcome;
import org.springframework.stereotype.Component;

/**
 * Resolves player outcomes to user-friendly messages for Discord.
 * This class provides a mapping from {@link PlayerOutcome} to a string message
 * that can be sent to users in Discord.
 */
@Component
public class MessageResolver {

    private static final String SKIP     = "‚è≠Ô∏è";
    private static final String PAUSE    = "‚è∏Ô∏è";
    private static final String PLAY     = "‚ñ∂Ô∏è";

    /**
     * Resolves a {@link PlayerOutcome} to a user-friendly message.
     *
     * @param playerOutcome the outcome of the player action
     * @return a string message corresponding to the player outcome
     */
    public String resolve(PlayerOutcome playerOutcome) {
        return switch (playerOutcome) {
            case ENQUEUED                   -> "‚úÖ Added to queue";
            case PLAY_STARTED               -> PLAY  + " Playing now";
            case COMPLETED                  -> "‚úÖ Track completed";
            case SKIPPED                    -> SKIP  + " Skipped to next track";
            case NO_NEXT                    -> "‚ùå Nothing to skip ‚Äì queue is empty";
            case REPEATING                  -> "üîÅ Repeated current track";
            case REPEAT_ON                  -> "üîÅ Repeat mode enabled";
            case REPEAT_OFF                 -> "üîÅ Repeat mode disabled";
            case PREVIOUS                   -> SKIP  + " Playing previous track";
            case NO_PREVIOUS                -> "‚ùå No previous track";
            case JUMPED_TO_TRACK            -> "‚úÖ Jumped to track";
            case INVALID_JUMP               -> "‚ùå Invalid jump target ‚Äì track not found";
            case PAUSED                     -> PAUSE + " Paused";
            case ALREADY_PAUSED             -> "‚ÑπÔ∏è Already paused";
            case RESUMED                    -> PLAY  + " Resumed";
            case ALREADY_PLAYING            -> "‚ÑπÔ∏è Already playing";
            case STOPPED                    -> "‚ñ† Stopped player";
            case QUEUE_CLEARED              -> "üóëÔ∏è  Cleared queue";
            case QUEUE_ALREADY_EMPTY        -> "‚ÑπÔ∏è Queue empty";
            case SHUFFLED                   -> "üîÄ Shuffled queue";
            case LOAD_FAILED -> null;
            case ERROR                      -> "‚ö†Ô∏è Unexpected error ‚Äì check logs!";
        };
    }
}
