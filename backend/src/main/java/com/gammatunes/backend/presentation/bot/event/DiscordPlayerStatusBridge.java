package com.gammatunes.backend.presentation.bot.event;

import com.gammatunes.backend.domain.model.PlayerOutcome;
import com.gammatunes.backend.domain.player.event.PlayerStateChanged;
import com.gammatunes.backend.domain.model.Session;
import com.gammatunes.backend.presentation.bot.player.service.PlayerPanelCoordinator;
import lombok.RequiredArgsConstructor;
import org.springframework.context.event.EventListener;
import org.springframework.stereotype.Component;

import static com.gammatunes.backend.presentation.ui.UiConstants.*;
import static com.gammatunes.backend.presentation.ui.UiConstants.PAUSE;
import static com.gammatunes.backend.presentation.ui.UiConstants.PLAY;
import static com.gammatunes.backend.presentation.ui.UiConstants.STOP;

@Component
@RequiredArgsConstructor
public class DiscordPlayerStatusBridge {

    private final PlayerPanelCoordinator panelCoordinator;

    @EventListener
    public void on(PlayerStateChanged event) {

        /* Convert outcome ‚Üí friendly text for the status line */
        String status = toStatusText(event.outcome());

        /* Tell the message service to update‚Äîor create‚Äîthe embed */
        panelCoordinator.publishStatus(
            new Session(event.sessionId()), status);
    }

    private String toStatusText(PlayerOutcome o) {
        return switch (o) {

            /* ‚îÄ‚îÄ‚îÄ Play / Add ‚îÄ‚îÄ‚îÄ */
            case ADDED_TO_QUEUE -> "‚úÖ Added to queue";
            case PLAYING_NOW -> "‚ñ∂Ô∏è Playing now";

            /* ‚îÄ‚îÄ‚îÄ Skip / Next ‚îÄ‚îÄ‚îÄ */

            case SKIPPED             -> SKIP + " Skipped to next track";
            case NO_NEXT_TRACK       -> "‚ùå Nothing to skip ‚Äì queue is empty";

            /* ‚îÄ‚îÄ‚îÄ Repeat ‚îÄ‚îÄ‚îÄ */
            case REPEATED            -> "üîÅ Repeated current track";
            case REPEAT_ENABLED      -> "üîÅ Repeat mode enabled";
            case REPEAT_DISABLED     -> "üîÅ Repeat mode disabled";

            /* ‚îÄ‚îÄ‚îÄ Previous ‚îÄ‚îÄ‚îÄ */
            case PLAYING_PREVIOUS    -> PREVIOUS + " Playing previous track";
            case NO_PREVIOUS_TRACK   -> "‚ùå No previous track";

            /* ‚îÄ‚îÄ‚îÄ Pause / Resume ‚îÄ‚îÄ‚îÄ */
            case PAUSED              -> PAUSE + " Paused";
            case ALREADY_PAUSED      -> "‚ÑπÔ∏è Already paused";
            case RESUMED             -> PLAY  + " Resumed";
            case ALREADY_PLAYING     -> "‚ÑπÔ∏è Already playing";

            /* ‚îÄ‚îÄ‚îÄ Stop / Clear ‚îÄ‚îÄ‚îÄ */
            case STOPPED             -> STOP + " Stopped player";
            case ALREADY_STOPPED     -> "‚ÑπÔ∏è Already stopped";
            case QUEUE_CLEARED       -> "üóëÔ∏è Cleared queue";
            case QUEUE_EMPTY         -> "‚ÑπÔ∏è Queue empty";

            /* ‚îÄ‚îÄ‚îÄ Fallback ‚îÄ‚îÄ‚îÄ */
            case SHUFFLED            -> "üîÄ Shuffled queue";
            case ERROR               -> "‚ö†Ô∏è Unexpected error ‚Äì check logs!";
        };
    }
}
